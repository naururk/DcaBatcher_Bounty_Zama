/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DcaBatcherInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "USDC"
      | "WETH"
      | "batches"
      | "depositUSDC"
      | "ethBalanceEnc"
      | "finalizeBatchWithTotal"
      | "getBatchInfo"
      | "getEthBalanceHandle"
      | "intents"
      | "lastBatchId"
      | "owner"
      | "pendingContrib"
      | "router"
      | "setRouter"
      | "setSimulateSwap"
      | "simulateSwap"
      | "submitIntent"
      | "transferOwnership"
      | "triggerBatch"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchStarted"
      | "BatchTotalDecrypted"
      | "BatchTotalDecryptionRequested"
      | "Deposited"
      | "Distributed"
      | "IntentSubmitted"
      | "SwapExecuted"
      | "SwapSimulated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUSDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethBalanceEnc",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeBatchWithTotal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalanceHandle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "intents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingContrib",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSimulateSwap",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitIntent",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerBatch",
    values: [AddressLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethBalanceEnc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBatchWithTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalanceHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "intents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingContrib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSimulateSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerBatch",
    data: BytesLike
  ): Result;
}

export namespace BatchStartedEvent {
  export type InputTuple = [
    id: BigNumberish,
    count: BigNumberish,
    totalHandle: BytesLike
  ];
  export type OutputTuple = [id: bigint, count: bigint, totalHandle: string];
  export interface OutputObject {
    id: bigint;
    count: bigint;
    totalHandle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchTotalDecryptedEvent {
  export type InputTuple = [id: BigNumberish, totalAmount: BigNumberish];
  export type OutputTuple = [id: bigint, totalAmount: bigint];
  export interface OutputObject {
    id: bigint;
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchTotalDecryptionRequestedEvent {
  export type InputTuple = [id: BigNumberish, requestID: BigNumberish];
  export type OutputTuple = [id: bigint, requestID: bigint];
  export interface OutputObject {
    id: bigint;
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntentSubmittedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    id: BigNumberish,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [id: bigint, amountIn: bigint, amountOut: bigint];
  export interface OutputObject {
    id: bigint;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapSimulatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    amountInUSDC: BigNumberish,
    pseudoEthOut: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    amountInUSDC: bigint,
    pseudoEthOut: bigint
  ];
  export interface OutputObject {
    id: bigint;
    amountInUSDC: bigint;
    pseudoEthOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DcaBatcher extends BaseContract {
  connect(runner?: ContractRunner | null): DcaBatcher;
  waitForDeployment(): Promise<this>;

  interface: DcaBatcherInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  USDC: TypedContractMethod<[], [string], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  batches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, boolean] & {
        totalHandle: string;
        requested: boolean;
        completed: boolean;
      }
    ],
    "view"
  >;

  depositUSDC: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  ethBalanceEnc: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  finalizeBatchWithTotal: TypedContractMethod<
    [batchId: BigNumberish, totalPlainUSDC: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBatchInfo: TypedContractMethod<
    [id: BigNumberish],
    [
      [string, string[], boolean, boolean] & {
        totalHandle: string;
        users: string[];
        requested: boolean;
        completed: boolean;
      }
    ],
    "view"
  >;

  getEthBalanceHandle: TypedContractMethod<
    [userAddr: AddressLike],
    [string],
    "view"
  >;

  intents: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, boolean] & {
        amountPerTick: string;
        remainingBudget: string;
        intervalSec: bigint;
        nextRunTs: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  lastBatchId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingContrib: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [string],
    "view"
  >;

  router: TypedContractMethod<[], [string], "view">;

  setRouter: TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;

  setSimulateSwap: TypedContractMethod<[on: boolean], [void], "nonpayable">;

  simulateSwap: TypedContractMethod<[], [boolean], "view">;

  submitIntent: TypedContractMethod<
    [
      amountPerTickExtRaw: BytesLike,
      budgetExtRaw: BytesLike,
      intervalSec: BigNumberish,
      startTs: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [n: AddressLike],
    [void],
    "nonpayable"
  >;

  triggerBatch: TypedContractMethod<
    [participants: AddressLike[]],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "USDC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, boolean] & {
        totalHandle: string;
        requested: boolean;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositUSDC"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ethBalanceEnc"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "finalizeBatchWithTotal"
  ): TypedContractMethod<
    [batchId: BigNumberish, totalPlainUSDC: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBatchInfo"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [string, string[], boolean, boolean] & {
        totalHandle: string;
        users: string[];
        requested: boolean;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEthBalanceHandle"
  ): TypedContractMethod<[userAddr: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "intents"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, boolean] & {
        amountPerTick: string;
        remainingBudget: string;
        intervalSec: bigint;
        nextRunTs: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastBatchId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingContrib"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setRouter"
  ): TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSimulateSwap"
  ): TypedContractMethod<[on: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "simulateSwap"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "submitIntent"
  ): TypedContractMethod<
    [
      amountPerTickExtRaw: BytesLike,
      budgetExtRaw: BytesLike,
      intervalSec: BigNumberish,
      startTs: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[n: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "triggerBatch"
  ): TypedContractMethod<[participants: AddressLike[]], [bigint], "nonpayable">;

  getEvent(
    key: "BatchStarted"
  ): TypedContractEvent<
    BatchStartedEvent.InputTuple,
    BatchStartedEvent.OutputTuple,
    BatchStartedEvent.OutputObject
  >;
  getEvent(
    key: "BatchTotalDecrypted"
  ): TypedContractEvent<
    BatchTotalDecryptedEvent.InputTuple,
    BatchTotalDecryptedEvent.OutputTuple,
    BatchTotalDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "BatchTotalDecryptionRequested"
  ): TypedContractEvent<
    BatchTotalDecryptionRequestedEvent.InputTuple,
    BatchTotalDecryptionRequestedEvent.OutputTuple,
    BatchTotalDecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "Distributed"
  ): TypedContractEvent<
    DistributedEvent.InputTuple,
    DistributedEvent.OutputTuple,
    DistributedEvent.OutputObject
  >;
  getEvent(
    key: "IntentSubmitted"
  ): TypedContractEvent<
    IntentSubmittedEvent.InputTuple,
    IntentSubmittedEvent.OutputTuple,
    IntentSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SwapSimulated"
  ): TypedContractEvent<
    SwapSimulatedEvent.InputTuple,
    SwapSimulatedEvent.OutputTuple,
    SwapSimulatedEvent.OutputObject
  >;

  filters: {
    "BatchStarted(uint256,uint256,bytes32)": TypedContractEvent<
      BatchStartedEvent.InputTuple,
      BatchStartedEvent.OutputTuple,
      BatchStartedEvent.OutputObject
    >;
    BatchStarted: TypedContractEvent<
      BatchStartedEvent.InputTuple,
      BatchStartedEvent.OutputTuple,
      BatchStartedEvent.OutputObject
    >;

    "BatchTotalDecrypted(uint256,uint64)": TypedContractEvent<
      BatchTotalDecryptedEvent.InputTuple,
      BatchTotalDecryptedEvent.OutputTuple,
      BatchTotalDecryptedEvent.OutputObject
    >;
    BatchTotalDecrypted: TypedContractEvent<
      BatchTotalDecryptedEvent.InputTuple,
      BatchTotalDecryptedEvent.OutputTuple,
      BatchTotalDecryptedEvent.OutputObject
    >;

    "BatchTotalDecryptionRequested(uint256,uint256)": TypedContractEvent<
      BatchTotalDecryptionRequestedEvent.InputTuple,
      BatchTotalDecryptionRequestedEvent.OutputTuple,
      BatchTotalDecryptionRequestedEvent.OutputObject
    >;
    BatchTotalDecryptionRequested: TypedContractEvent<
      BatchTotalDecryptionRequestedEvent.InputTuple,
      BatchTotalDecryptionRequestedEvent.OutputTuple,
      BatchTotalDecryptionRequestedEvent.OutputObject
    >;

    "Deposited(address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "Distributed(uint256)": TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;
    Distributed: TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;

    "IntentSubmitted(address)": TypedContractEvent<
      IntentSubmittedEvent.InputTuple,
      IntentSubmittedEvent.OutputTuple,
      IntentSubmittedEvent.OutputObject
    >;
    IntentSubmitted: TypedContractEvent<
      IntentSubmittedEvent.InputTuple,
      IntentSubmittedEvent.OutputTuple,
      IntentSubmittedEvent.OutputObject
    >;

    "SwapExecuted(uint256,uint256,uint256)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;

    "SwapSimulated(uint256,uint256,uint256)": TypedContractEvent<
      SwapSimulatedEvent.InputTuple,
      SwapSimulatedEvent.OutputTuple,
      SwapSimulatedEvent.OutputObject
    >;
    SwapSimulated: TypedContractEvent<
      SwapSimulatedEvent.InputTuple,
      SwapSimulatedEvent.OutputTuple,
      SwapSimulatedEvent.OutputObject
    >;
  };
}
